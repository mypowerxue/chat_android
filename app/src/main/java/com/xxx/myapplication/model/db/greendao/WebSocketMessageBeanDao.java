package com.xxx.myapplication.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxx.myapplication.model.db.entry.WebSocketMessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEB_SOCKET_MESSAGE_BEAN".
*/
public class WebSocketMessageBeanDao extends AbstractDao<WebSocketMessageBean, Long> {

    public static final String TABLENAME = "WEB_SOCKET_MESSAGE_BEAN";

    /**
     * Properties of entity WebSocketMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SendId = new Property(1, Integer.class, "sendId", false, "SEND_ID");
        public final static Property ReceiveId = new Property(2, Integer.class, "receiveId", false, "RECEIVE_ID");
        public final static Property SendType = new Property(3, Integer.class, "sendType", false, "SEND_TYPE");
        public final static Property MessageType = new Property(4, Integer.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
    }


    public WebSocketMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WebSocketMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEB_SOCKET_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SEND_ID\" INTEGER," + // 1: sendId
                "\"RECEIVE_ID\" INTEGER," + // 2: receiveId
                "\"SEND_TYPE\" INTEGER," + // 3: sendType
                "\"MESSAGE_TYPE\" INTEGER," + // 4: messageType
                "\"MESSAGE\" TEXT," + // 5: message
                "\"STATUS\" INTEGER," + // 6: status
                "\"CREATE_TIME\" TEXT);"); // 7: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEB_SOCKET_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WebSocketMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindLong(2, sendId);
        }
 
        Integer receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindLong(3, receiveId);
        }
 
        Integer sendType = entity.getSendType();
        if (sendType != null) {
            stmt.bindLong(4, sendType);
        }
 
        Integer messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindLong(5, messageType);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WebSocketMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindLong(2, sendId);
        }
 
        Integer receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindLong(3, receiveId);
        }
 
        Integer sendType = entity.getSendType();
        if (sendType != null) {
            stmt.bindLong(4, sendType);
        }
 
        Integer messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindLong(5, messageType);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WebSocketMessageBean readEntity(Cursor cursor, int offset) {
        WebSocketMessageBean entity = new WebSocketMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sendId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // receiveId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sendType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // messageType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WebSocketMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setReceiveId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSendType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMessageType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WebSocketMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WebSocketMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WebSocketMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
